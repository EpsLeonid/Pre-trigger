TITLE "FindMaxAmp";

INCLUDE "lpm_counter.inc" ;
INCLUDE "lpm_shiftreg.inc" ;
INCLUDE "lpm_add_sub.inc" ;
INCLUDE "EdgeSensing.inc"; 
INCLUDE "Sum4.inc";
INCLUDE "Sum2.inc";
INCLUDE "ThrCellNumber.inc";

CONSTANT ADC_Bits = 10; -- разрядность АЦП
CONSTANT NumTrigCh = 16;   -- количество триггерных каналов
CONSTANT NumInReg = 4;   -- число входных регистров (число слов)
CONSTANT NumGroup = 9;
Constant Piedistal_def = 250; -- Пьедестал для вычитания (знаение реального пьедестала около 265)
Constant Piedistal_def_2 = 253; -- Пьедестал для вычитания (знаение реального пьедестала около 280)
CONSTANT ThresholdData_0 = 140;
CONSTANT ThresholdData_1 = 150;
CONSTANT ThresholdData_2 = 250;
CONSTANT MaxTime = 160;  -- Maximal Valid time (750ns)
CONSTANT ResetTime = 240;

SUBDESIGN FindMaxAmp
(

In_Data[NumTrigCh-1..0][ADC_Bits-1..0]	: input; -- входные данные
RegInit									: input;
MaxAmp[ADC_Bits-1..0]					: output;
MaxCellNumber[3..0]						: output;
ThrNum1[3..0]							: output;
ThrNum2[3..0]							: output;
ThrNum3[3..0]							: output;
FastTrig								: output;
Trig									: output;

Clock									: input;
Clock160								: input;
Reset									: input;
ResetAll								: output;
Error									: output;

test[15..0]								: output;

)

VARIABLE

InData_Reg[NumTrigCh-1..0][NumInReg-1..0]		: lpm_shiftreg with (LPM_WIDTH = ADC_Bits, LPM_DIRECTION="unused"); -- регистр оцифрованных значений (сэмплов)
Piedistal_Reg									: lpm_shiftreg with (LPM_WIDTH = ADC_Bits, LPM_DIRECTION="unused", LPM_SVALUE = Piedistal_def); -- ?aaeno? o?iaiy ii?iaa
Piedistal_Reg_2									: lpm_shiftreg with (LPM_WIDTH = ADC_Bits, LPM_DIRECTION="unused", LPM_SVALUE = Piedistal_def_2); -- ?aaeno? o?iaiy ii?iaa
SavePReg										: node;

Sub_Ped[NumTrigCh-1..0]							: lpm_add_sub with (lpm_width = ADC_Bits, lpm_direction="sub", LPM_REPRESENTATION = "UNSIGNED",
																	lpm_pipeline = 1);
Summator[NumTrigCh-1..0]						: Sum2; -- сумматор на 2
Average_Reg[NumTrigCh-1..0]						: lpm_shiftreg with (LPM_WIDTH = ADC_Bits, LPM_DIRECTION="unused"); -- ?aaeno? on?aaiaiiuo cia?aiee
Divide_x_4[NumTrigCh-1..0][ADC_Bits-1..0]		: node; 
--Delay_Aver_Reg[NumTrigCh-1..0]					: lpm_shiftreg with (LPM_WIDTH = ADC_Bits, LPM_DIRECTION="unused"); -- регистр данных
--DividecentrAmp_x_4[ADC_Bits-1..0]				: node; 

GroupSum[8..0]									: Sum4;
Group_Reg[8..0]									: lpm_shiftreg with (LPM_WIDTH = ADC_Bits, LPM_DIRECTION="unused"); -- регистр данных
Delay_Group_Reg[8..0]							: lpm_shiftreg with (LPM_WIDTH = ADC_Bits, LPM_DIRECTION="unused"); -- регистр данных

--Integrator_Reg                   : lpm_shiftreg with (LPM_WIDTH = ADC_Bits+2, LPM_DIRECTION="unused"); -- 

LThresholdReg				: lpm_shiftreg with (LPM_WIDTH=ADC_Bits,LPM_DIRECTION="unused",LPM_SVALUE = ThresholdData_0); -- нижний порог
MThresholdReg				: lpm_shiftreg with (LPM_WIDTH=ADC_Bits,LPM_DIRECTION="unused",LPM_SVALUE = ThresholdData_1); -- средний порог
HThresholdReg				: lpm_shiftreg with (LPM_WIDTH=ADC_Bits,LPM_DIRECTION="unused",LPM_SVALUE = ThresholdData_2); -- верхний порог

GroupLT_Trig[8..0]			: SRFF; -- флаг определения нижнего порога
GroupMT_Trig[8..0]			: SRFF; -- флаг определения среднего порога
GroupHT_Trig[8..0]			: SRFF; -- флаг определения верхнего порога
GroupAmp_Trig[8..0]			: SRFF; -- флаг определения максимума

GroupValue_Up_LT[8..0]		: node; -- сигнал о превышении нижнего порога (стоит пока нижний порог превышен)
GroupValue_Up_MT[8..0]		: node;
GroupValue_Up_HT[8..0]		: node;
--Value_Down_LT[NumTrigCh-1..0]	: node; -- нижний порог подлежит сбросу
GroupValue_Amp_Done[8..0]	: node; -- сигнал об обнаружении изменения знака разницы между предыдущими и текущими сэмплами

TrigThreshCount_1				: ThrCellNumber;
TrigThreshCount_2				: ThrCellNumber;
TrigThreshCount_3				: ThrCellNumber;

TrigThreshCount_Reg1			: lpm_shiftreg with (LPM_WIDTH = 4, LPM_DIRECTION="unused");
TrigThreshCount_Reg2			: lpm_shiftreg with (LPM_WIDTH = 4, LPM_DIRECTION="unused");
TrigThreshCount_Reg3			: lpm_shiftreg with (LPM_WIDTH = 4, LPM_DIRECTION="unused");
%
CentrValue_Thr					: node;
CentrValue_Amp_Done				: node;
CentrAmp_Trig					: SRFF;
CentrAmp_Reg					: lpm_shiftreg with (LPM_WIDTH = ADC_Bits, LPM_DIRECTION="unused"); -- амплитуда центральной сборки 4х4 кристалла
%
Amp_Reg[NumGroup-1..0]			: lpm_shiftreg with (LPM_WIDTH = ADC_Bits, LPM_DIRECTION="unused"); -- амплитуда сигнала
Amp_Reg_1						: lpm_shiftreg with (LPM_WIDTH = ADC_Bits+4, LPM_DIRECTION="unused"); 
Amp_Reg_2						: lpm_shiftreg with (LPM_WIDTH = ADC_Bits+4, LPM_DIRECTION="unused"); 
Amp_Reg_3						: lpm_shiftreg with (LPM_WIDTH = ADC_Bits+4, LPM_DIRECTION="unused"); 
Amp_Reg_4						: lpm_shiftreg with (LPM_WIDTH = ADC_Bits+4, LPM_DIRECTION="unused"); 
Amp_Reg_5						: lpm_shiftreg with (LPM_WIDTH = ADC_Bits+4, LPM_DIRECTION="unused"); 
Amp_Reg_6						: lpm_shiftreg with (LPM_WIDTH = ADC_Bits+4, LPM_DIRECTION="unused"); 
Amp_Reg_7						: lpm_shiftreg with (LPM_WIDTH = ADC_Bits+4, LPM_DIRECTION="unused"); 
Max_Reg							: lpm_shiftreg with (LPM_WIDTH = ADC_Bits+4, LPM_DIRECTION="unused"); -- максимальная амплитуда сигнала

NSampleCt						: LPM_COUNTER with (lpm_width=11, lpm_direction="up" ); -- n?ao?ee 

ENDthrFound						: node;

AllReset						: SRFF; -- общий сброс
Inhibit							: SRFF;
TimeOutSch						: node;
TimeOut							: node;
ENDCycle						: node; -- флаг окончание работы цикла
DelayENDCycle[9..0]				: DFF;
DelayReset[9..0]				: DFF;

BEGIN

DEFAULTS

GroupValue_Up_LT[8..0]		= GND;
--Value_Down_LT[NumTrigCh-1..0]	= GND;
GroupValue_Amp_Done[8..0]	= GND;
TimeOutSch = GND;
TimeOut = GND;
ENDCycle = GND;
ENDthrFound = GND;

END DEFAULTS;

Piedistal_Reg.sset = RegInit;
Piedistal_Reg.(clock, enable, sset) = (Clock, RegInit, VCC);
Piedistal_Reg_2.sset = RegInit;
Piedistal_Reg_2.(clock, enable, sset) = (Clock, RegInit, VCC);

	SUB_Ped[0].(dataa[], datab[]) = (In_Data[0][ADC_Bits-1..0], Piedistal_Reg.q[9..0]);
--	SUB_Ped.aclr = AllReset.q;
	SUB_ped[0].(clock, clken) = (Clock, VCC);
	SUB_Ped[1].(dataa[], datab[]) = (In_Data[1][ADC_Bits-1..0], Piedistal_Reg_2.q[9..0]);
--	SUB_Ped.aclr = AllReset.q;
	SUB_ped[1].(clock, clken) = (Clock, VCC);

FOR i in 2 to (NumTrigCh-1) GENERATE
	SUB_Ped[i].(dataa[], datab[]) = (In_Data[i][ADC_Bits-1..0], Piedistal_Reg.q[9..0]);
--	SUB_Ped.aclr = AllReset.q;
	SUB_ped[i].(clock, clken) = (Clock, VCC);
END GENERATE;

-- *************** Конвеер фильтра бегущее среднее *********************
-- соединяем все регистры последовательно
FOR i in 0 to (NumTrigCh-1) GENERATE
--	InData_Reg[i][0].(data[],clock,enable,load) = (In_Data[i][ADC_Bits-1..0],Clock, VCC,VCC);
	InData_Reg[i][0].(data[],clock,enable,load) = (SUB_Ped[i].result[ADC_Bits-1..0],Clock, VCC,VCC);
		FOR j IN 0 TO (NumInReg-2) GENERATE
		InData_Reg[i][j+1].data[] = InData_Reg[i][j].q[];
		InData_Reg[i][j+1].(clock,enable,load) = (Clock,VCC,VCC);
	END GENERATE;
END GENERATE;

-- Находим среднее по 2 отсчетам
FOR i in 0 to (NumTrigCh-1) GENERATE
	Summator[i].clock = Clock;
	Summator[i].(data0x[],data1x[]) = (InData_Reg[i][0].q[],InData_Reg[i][1].q[]);
--	Summator[i].(data0x[],data1x[],data2x[],data3x[]) = (InData_Reg[i][0].q[],InData_Reg[i][1].q[],InData_Reg[i][2].q[],InData_Reg[i][3].q[]);
--	Divide_x_4[i][ADC_Bits-1..0] = Summator[i].result[10..1]; -- делим на 2 (сдвигаем на 1 разряда)

--	Average_Reg[i].data[] = Divide_x_4[i][ADC_Bits-1..0];
	Average_Reg[i].data[] = Summator[i].result[10..1]; -- делим на 2 (сдвигаем на 1 разряда)
	Average_Reg[i].(clock,enable,load)  = (Clock, VCC,VCC);
END GENERATE;

-- *************** Поиск амплитуды в группах по 4-е триггерных ячееки ********************
FOR i in 0 to (NumGroup-1) GENERATE
	GroupSum[i].clock = Clock;
END GENERATE;
GroupSum[0].(data0x[],data1x[],data2x[],data3x[]) = (Average_Reg[0].q[],Average_Reg[1].q[],Average_Reg[4].q[],Average_Reg[5].q[]);
GroupSum[1].(data0x[],data1x[],data2x[],data3x[]) = (Average_Reg[4].q[],Average_Reg[5].q[],Average_Reg[8].q[],Average_Reg[9].q[]);
GroupSum[2].(data0x[],data1x[],data2x[],data3x[]) = (Average_Reg[8].q[],Average_Reg[9].q[],Average_Reg[12].q[],Average_Reg[13].q[]);
GroupSum[3].(data0x[],data1x[],data2x[],data3x[]) = (Average_Reg[1].q[],Average_Reg[2].q[],Average_Reg[5].q[],Average_Reg[6].q[]);
GroupSum[4].(data0x[],data1x[],data2x[],data3x[]) = (Average_Reg[5].q[],Average_Reg[6].q[],Average_Reg[9].q[],Average_Reg[10].q[]);
GroupSum[5].(data0x[],data1x[],data2x[],data3x[]) = (Average_Reg[9].q[],Average_Reg[10].q[],Average_Reg[13].q[],Average_Reg[14].q[]);
GroupSum[6].(data0x[],data1x[],data2x[],data3x[]) = (Average_Reg[2].q[],Average_Reg[3].q[],Average_Reg[6].q[],Average_Reg[7].q[]);
GroupSum[7].(data0x[],data1x[],data2x[],data3x[]) = (Average_Reg[6].q[],Average_Reg[7].q[],Average_Reg[10].q[],Average_Reg[11].q[]);
GroupSum[8].(data0x[],data1x[],data2x[],data3x[]) = (Average_Reg[10].q[],Average_Reg[11].q[],Average_Reg[14].q[],Average_Reg[15].q[]);

FOR i in 0 to (NumGroup-1) GENERATE
	Group_Reg[i].data[] = GroupSum[i].result[11..2];
	Group_Reg[i].(clock,enable,load) = (Clock, VCC,VCC);
END GENERATE;
--GroupThrReg.(data[], clock, enable, sset) = (ThresholdData_2, Clock, VCC, VCC);

-- *************** Трехпороговый дискриминатор ********************
-- проверяем на превышение порогов
LThresholdReg.(clock, enable, sset) = (Clock, VCC, VCC);
MThresholdReg.(clock, enable, sset) = (Clock, VCC, VCC);
HThresholdReg.(clock, enable, sset) = (Clock, VCC, VCC);

FOR i in 0 to (NumGroup-1) GENERATE
	IF((Group_Reg[i].q[] > LThresholdReg.q[]) AND (GroupLT_Trig[i].q == GND)) THEN GroupValue_Up_LT[i] = VCC; -- превышен нижний порог
																			  ELSE GroupValue_Up_LT[i] = GND;
	END IF; 
	IF((Group_Reg[i].q[] > MThresholdReg.q[]) AND (GroupMT_Trig[i].q == GND) AND (GroupLT_Trig[i].q == VCC)) THEN GroupValue_Up_MT[i] = VCC; -- превышен средний порог
																			  ELSE GroupValue_Up_MT[i] = GND;
	END IF; 
	IF((Group_Reg[i].q[] > HThresholdReg.q[]) AND (GroupHT_Trig[i].q == GND) AND (GroupLT_Trig[i].q == VCC)) THEN GroupValue_Up_HT[i] = VCC; -- превышен верхний порог
																			  ELSE GroupValue_Up_HT[i] = GND;
	END IF; 
	GroupLT_Trig[i].(S,clk,R) = (GroupValue_Up_LT[i], Clock, AllReset.q);
	GroupMT_Trig[i].(S,clk,R) = (GroupValue_Up_MT[i], Clock, AllReset.q);
	GroupHT_Trig[i].(S,clk,R) = (GroupValue_Up_HT[i], Clock, AllReset.q);

END GENERATE;
%
IF (--(InData_Reg[8][0].q[] > LThresholdReg.q[]) OR
	 (InData_Reg[9][0].q[] > LThresholdReg.q[])
	--OR (InData_Reg[10][0].q[] > LThresholdReg.q[])
	OR (InData_Reg[11][0].q[] > LThresholdReg.q[])
	OR (InData_Reg[12][0].q[] > LThresholdReg.q[])
	OR (InData_Reg[13][0].q[] > LThresholdReg.q[])
	OR (InData_Reg[14][0].q[] > LThresholdReg.q[])
	OR (InData_Reg[15][0].q[] > LThresholdReg.q[])) then FastTrig = VCC;
													else FastTrig = GND;
END IF;

IF (--(InData_Reg[8].q[] > Threshold_Reg[1].q[]) OR
	 (InData_Reg[9].q[] > Threshold_Reg[1].q[])
	--OR (InData_Reg[10].q[] > Threshold_Reg[1].q[])
	OR (InData_Reg[11].q[] > Threshold_Reg[1].q[]) 
	OR (InData_Reg[12].q[] > Threshold_Reg[1].q[]) 
	OR (InData_Reg[13].q[] > Threshold_Reg[1].q[])
	OR (InData_Reg[14].q[] > Threshold_Reg[1].q[])
	OR (InData_Reg[15].q[] > Threshold_Reg[1].q[])) then TrigDis = VCC;
													else TrigDis = GND;
END IF;
%
FastTrig = (GroupLT_Trig[0].q OR GroupLT_Trig[1].q OR GroupLT_Trig[2].q OR GroupLT_Trig[3].q OR 
		GroupLT_Trig[4].q OR GroupLT_Trig[5].q OR GroupLT_Trig[6].q OR GroupLT_Trig[7].q OR
		GroupLT_Trig[8].q);

--- исправить счетчики!!!

TrigThreshCount_1.(clock) = (Clock);
TrigThreshCount_2.(clock) = (Clock);
TrigThreshCount_3.(clock) = (Clock);
TrigThreshCount_1.(data0x[],data1x[],data2x[],data3x[],data4x[],data5x[],data6x[],data7x[],data8x[]) =
				  (GroupLT_Trig[0].q,GroupLT_Trig[1].q,GroupLT_Trig[2].q,
				   GroupLT_Trig[3].q,GroupLT_Trig[4].q,GroupLT_Trig[5].q,
				   GroupLT_Trig[6].q,GroupLT_Trig[7].q,GroupLT_Trig[8].q);
TrigThreshCount_2.(data0x[],data1x[],data2x[],data3x[],data4x[],data5x[],data6x[],data7x[],data8x[]) =
				  (GroupMT_Trig[0].q,GroupMT_Trig[1].q,GroupMT_Trig[2].q,
				   GroupMT_Trig[3].q,GroupMT_Trig[4].q,GroupMT_Trig[5].q,
				   GroupMT_Trig[6].q,GroupMT_Trig[7].q,GroupMT_Trig[8].q);
TrigThreshCount_3.(data0x[],data1x[],data2x[],data3x[],data4x[],data5x[],data6x[],data7x[],data8x[]) =
				  (GroupHT_Trig[0].q,GroupHT_Trig[1].q,GroupHT_Trig[2].q,
				   GroupHT_Trig[3].q,GroupHT_Trig[4].q,GroupHT_Trig[5].q,
				   GroupHT_Trig[6].q,GroupHT_Trig[7].q,GroupHT_Trig[8].q);

TrigThreshCount_Reg1.(data[], clock, enable, sclr) = (TrigThreshCount_1.result[], Clock, Trig, Inhibit.q);
TrigThreshCount_Reg2.(data[], clock, enable, sclr) = (TrigThreshCount_2.result[], Clock, Trig, Inhibit.q);
TrigThreshCount_Reg3.(data[], clock, enable, sclr) = (TrigThreshCount_3.result[], Clock, Trig, Inhibit.q);

ThrNum1[] = TrigThreshCount_Reg1.q[];
ThrNum2[] = TrigThreshCount_Reg2.q[];
ThrNum3[] = TrigThreshCount_Reg3.q[];

FOR i in 0 to (NumGroup-1) GENERATE
	Delay_Group_Reg[i].data[] = Group_Reg[i].q[ADC_Bits-1..0];
	Delay_Group_Reg[i].(clock,enable,load, sclr)  = (Clock, VCC, VCC, AllReset.q);
	IF((Group_Reg[i].q[] < Delay_Group_Reg[i].q[]) AND (GroupLT_Trig[i].q == VCC) AND (GroupAmp_Trig[i].q == GND)) THEN GroupValue_Amp_Done[i] = VCC;
																												   ELSE GroupValue_Amp_Done[i] = GND;
	END IF; 
	GroupAmp_Trig[i].(S,clk,R) = (GroupValue_Amp_Done[i], Clock, AllReset.q); -- 

	Amp_Reg[i].(data[],clock,enable,load,aclr) = (Delay_Group_Reg[i].q[],Clock,(!GroupAmp_Trig[i].q AND GroupLT_Trig[i].q),VCC, AllReset.q);
END GENERATE;

Trig = (GroupAmp_Trig[0].q OR GroupAmp_Trig[1].q OR GroupAmp_Trig[2].q OR GroupAmp_Trig[3].q OR 
		GroupAmp_Trig[4].q OR GroupAmp_Trig[5].q OR GroupAmp_Trig[6].q OR GroupAmp_Trig[7].q OR
		GroupAmp_Trig[8].q);
--MaxAmp[] = GND;
--MaxAmp[] = Amp_Reg[0].q[9..2];
--MaxCellNumber[] = b"0001";

-- *************** Поиск максимальной амплитуды ********************
Amp_Reg_1.(clock, enable, load, sclr) = (Clock, VCC, VCC, Inhibit.q);
Amp_Reg_2.(clock, enable, load, sclr) = (Clock, VCC, VCC, Inhibit.q);
Amp_Reg_3.(clock, enable, load, sclr) = (Clock, VCC, VCC, Inhibit.q);
Amp_Reg_4.(clock, enable, load, sclr) = (Clock, VCC, VCC, Inhibit.q);
Amp_Reg_5.(clock, enable, load, sclr) = (Clock, VCC, VCC, Inhibit.q);
Amp_Reg_6.(clock, enable, load, sclr) = (Clock, VCC, VCC, Inhibit.q);
Amp_Reg_7.(clock, enable, load, sclr) = (Clock, VCC, VCC, Inhibit.q);
Max_Reg.(clock, enable, load, sclr) = (Clock, VCC, VCC, Inhibit.q);

IF Amp_Reg[0].q[] > Amp_Reg[1].q[] Then 
	Amp_Reg_1.data[9..0] = Amp_Reg[0].q[];
	Amp_Reg_1.data[13..10] = b"0000";
ELSE Amp_Reg_1.data[9..0] = Amp_Reg[1].q[];
	 Amp_Reg_1.data[13..10] = b"0001";
END IF;

IF Amp_Reg[2].q[] > Amp_Reg[3].q[] Then 
	Amp_Reg_2.data[9..0] = Amp_Reg[2].q[];
	Amp_Reg_2.data[13..10] = b"0010";
ELSE Amp_Reg_2.data[9..0] = Amp_Reg[3].q[];
	 Amp_Reg_2.data[13..10] = b"0011";
END IF;

IF Amp_Reg[4].q[] > Amp_Reg[5].q[] Then 
	Amp_Reg_3.data[9..0] = Amp_Reg[4].q[];
	Amp_Reg_3.data[13..10] = b"0100";
ELSE Amp_Reg_3.data[9..0] = Amp_Reg[5].q[];
	 Amp_Reg_3.data[13..10] = b"0101";
END IF;

IF Amp_Reg[6].q[] > Amp_Reg[7].q[] Then 
	Amp_Reg_4.data[9..0] = Amp_Reg[6].q[];
	Amp_Reg_4.data[13..10] = b"0110";
ELSE Amp_Reg_4.data[9..0] = Amp_Reg[7].q[];
	 Amp_Reg_4.data[13..10] = b"0111";
END IF;

IF Amp_Reg_1.q[9..0] > Amp_Reg_2.q[9..0] Then 
	Amp_Reg_5.data[] = Amp_Reg_1.q[];
ELSE Amp_Reg_5.data[] = Amp_Reg_2.q[];
END IF;

IF Amp_Reg_3.q[9..0] > Amp_Reg_4.q[9..0] Then 
	Amp_Reg_6.data[] = Amp_Reg_3.q[];
ELSE Amp_Reg_6.data[] = Amp_Reg_4.q[];
END IF;

IF Amp_Reg_5.q[9..0] > Amp_Reg_6.q[9..0] Then 
	Amp_Reg_7.data[] = Amp_Reg_5.q[];
ELSE Amp_Reg_7.data[] = Amp_Reg_6.q[];
END IF;

IF Amp_Reg_7.q[9..0] > Amp_Reg[8].q[] Then 
	Max_Reg.data[] = Amp_Reg_7.q[];
ELSE Max_Reg.data[9..0] = Amp_Reg[8].q[];
	 Max_Reg.data[13..10] = b"1000";
END IF;

IF ((GroupLT_Trig[0].q OR GroupLT_Trig[1].q OR GroupLT_Trig[2].q OR GroupLT_Trig[3].q OR 
	  GroupLT_Trig[4].q OR GroupLT_Trig[5].q OR GroupLT_Trig[6].q OR GroupLT_Trig[7].q OR
	  GroupLT_Trig[8].q)== VCC)
		Then MaxAmp[] = Max_Reg.q[9..0];--Amp_Reg_7.q[7..0];--
			 MaxCellNumber[] = Max_Reg.q[13..10];--Amp_Reg_7.q[11..8];--
		Else MaxAmp[] = b"0000000000";--Amp_Reg_7.q[7..0];--
			 MaxCellNumber[] = b"1111";--Amp_Reg_7.q[11..8];--
END IF;

-- *************** Cycle proceeding control ********************
-- Общий сброс
-- максимальное время в течении которого ищем пороги и затем стоят флаги найденных порогов

NSampleCt.(clock,cnt_en,sclr,clk_en) = (Clock, 
	 (GroupLT_Trig[0].q OR GroupLT_Trig[1].q OR GroupLT_Trig[2].q OR GroupLT_Trig[3].q OR 
	  GroupLT_Trig[4].q OR GroupLT_Trig[5].q OR GroupLT_Trig[6].q OR GroupLT_Trig[7].q OR 
	  GroupLT_Trig[8].q), AllReset.q, VCC); --счетчик тактов от момента пересечения порога

IF(( NSampleCt.q[] >= MaxTime) AND 
	(((GroupHT_Trig[0].q AND GroupHT_Trig[1].q AND GroupHT_Trig[2].q AND GroupHT_Trig[3].q AND 
	  GroupHT_Trig[4].q AND GroupHT_Trig[5].q AND GroupHT_Trig[6].q AND GroupHT_Trig[7].q AND 
	  GroupHT_Trig[8].q) == GND) AND 
	((GroupAmp_Trig[0].q AND GroupAmp_Trig[1].q AND GroupAmp_Trig[2].q AND GroupAmp_Trig[3].q AND 
	  GroupAmp_Trig[4].q AND GroupAmp_Trig[5].q AND GroupAmp_Trig[6].q AND GroupAmp_Trig[7].q AND 
	  GroupAmp_Trig[8].q) == GND))) THEN TimeOutSch = VCC; 
									ELSE TimeOutSch = GND; 
END IF;

IF( NSampleCt.q[] >= ResetTime) THEN TimeOut = VCC; 
								ELSE TimeOut = GND; 
END IF;

IF (((GroupLT_Trig[0].q OR GroupLT_Trig[1].q OR GroupLT_Trig[2].q OR GroupLT_Trig[3].q OR 
	  GroupLT_Trig[4].q OR GroupLT_Trig[5].q OR GroupLT_Trig[6].q OR GroupLT_Trig[7].q OR
	  GroupLT_Trig[8].q)== VCC) AND 
	((GroupAmp_Trig[0].q OR GroupAmp_Trig[1].q OR GroupAmp_Trig[2].q OR GroupAmp_Trig[3].q OR 
	  GroupAmp_Trig[4].q OR GroupAmp_Trig[5].q OR GroupAmp_Trig[6].q OR GroupAmp_Trig[7].q OR
	  GroupAmp_Trig[8].q)== VCC)) THEN ENDCycle = VCC; -- флаг окончание работы цикла
								  ELSE ENDCycle = GND;
END IF;

IF (((Group_Reg[0].q[] < LThresholdReg.q[]) AND (Group_Reg[1].q[] < LThresholdReg.q[]) AND 
	 (Group_Reg[2].q[] < LThresholdReg.q[]) AND (Group_Reg[3].q[] < LThresholdReg.q[]) AND
	 (Group_Reg[4].q[] < LThresholdReg.q[]) AND (Group_Reg[5].q[] < LThresholdReg.q[]) AND 
	 (Group_Reg[6].q[] < LThresholdReg.q[]) AND (Group_Reg[7].q[] < LThresholdReg.q[]) AND
	 (Group_Reg[8].q[] < LThresholdReg.q[])) AND 
	(((GroupLT_Trig[0].q OR GroupLT_Trig[1].q OR GroupLT_Trig[2].q OR GroupLT_Trig[3].q OR 
	  GroupLT_Trig[4].q OR GroupLT_Trig[5].q OR GroupLT_Trig[6].q OR GroupLT_Trig[7].q OR 
	  GroupLT_Trig[8].q)== VCC))) THEN ENDthrFound = VCC; -- iiene iaeiai ii?iaa ia ?ac?aoaiea ?aaiou oeeea caiiai
								  ELSE ENDthrFound = GND;
END IF;

DelayENDCycle[0].(d,clk) = (ENDCycle, Clock);
DelayENDCycle[1].(d,clk) = (DelayENDCycle[0], Clock);
DelayENDCycle[2].(d,clk) = (DelayENDCycle[1], Clock);
DelayENDCycle[3].(d,clk) = (DelayENDCycle[2], Clock);
DelayENDCycle[4].(d,clk) = (DelayENDCycle[3], Clock);
DelayENDCycle[5].(d,clk) = (DelayENDCycle[4], Clock);
DelayENDCycle[6].(d,clk) = (DelayENDCycle[5], Clock);
DelayENDCycle[7].(d,clk) = (DelayENDCycle[6], Clock);
DelayENDCycle[8].(d,clk) = (DelayENDCycle[7], Clock);
DelayENDCycle[9].(d,clk) = (DelayENDCycle[8], Clock);

Inhibit.S = DelayENDCycle[9].q;
Inhibit.clk = Clock;
Inhibit.R = DelayReset[5].q;

AllReset.S = (TimeOutSch OR (TimeOut AND ENDthrFound));
AllReset.clk = Clock;
AllReset.R = DelayReset[5].q; -- работа разрешается после пересечения малого порога при уменьшении сигнала

DelayReset[0].(d, clk) = (AllReset.q, Clock);
DelayReset[1].(d, clk) = (DelayReset[0].q, Clock);
DelayReset[2].(d, clk) = (DelayReset[1].q, Clock);
DelayReset[3].(d, clk) = (DelayReset[2].q, Clock);
DelayReset[4].(d, clk) = (DelayReset[3].q, Clock);
DelayReset[5].(d, clk) = (DelayReset[4].q, Clock);
DelayReset[6].(d, clk) = (DelayReset[5].q, Clock);
DelayReset[7].(d, clk) = (DelayReset[6].q, Clock);
DelayReset[8].(d, clk) = (DelayReset[7].q, Clock);
DelayReset[9].(d, clk) = (DelayReset[8].q, Clock);

ResetAll = AllReset.q;

test[7..0] = MaxAmp[7..0];--Group_Reg[0].q[9..2];--GroupSum[1].result[11..2];
test[8] = MaxCellNumber[0];--TimeOutSch;--
test[9] = MaxCellNumber[1];--TimeOut;--
test[10] = MaxCellNumber[2];--ENDthrFound;--
test[11] = (%GroupLT_Trig[0].q OR GroupLT_Trig[1].q OR GroupLT_Trig[2].q OR GroupLT_Trig[3].q OR 
	  GroupLT_Trig[4].q OR GroupLT_Trig[5].q OR GroupLT_Trig[6].q OR GroupLT_Trig[7].q OR %
	  GroupLT_Trig[8].q);
test[12] = (%GroupAmp_Trig[0].q OR GroupAmp_Trig[1].q OR GroupAmp_Trig[2].q OR GroupAmp_Trig[3].q OR 
	  GroupAmp_Trig[4].q OR GroupAmp_Trig[5].q OR GroupAmp_Trig[6].q OR GroupAmp_Trig[7].q OR% 
	  GroupAmp_Trig[8].q);
test[13] = Inhibit.q;
test[14] = AllReset.q;--Group_Reg[2].q[9..2];--GroupSum[0].result[11..4];
test[15] = (FastTrig AND !DelayENDCycle[8].q);

END;