Title "Trigger Module for Prototype of COMET Calorimeter";
-- v.2a  : ECAL Pretrigger for test
-- v.2b  : ECAL Pretrigger for test in test beam, fixed a few bugs; ver. for beam-test 2016

INCLUDE "lpm_compare.inc" ;
INCLUDE "lpm_shiftreg.inc" ;
INCLUDE "lpm_counter.inc" ;
INCLUDE	"lpm_add_sub.inc";
INCLUDE "lpm_mux.inc" ;
INCLUDE "lpm_ff.inc";

INCLUDE "LVDS_In.inc";
INCLUDE "DDR_in.inc";
INCLUDE "EdgeSensing.inc";
INCLUDE "LevelSensing.inc" ;
INCLUDE "PulseShaper.inc" ;
INCLUDE "LightPulser.inc";

INCLUDE "PLL_Trigger.inc";
INCLUDE "PhaseSwitch.inc";
INCLUDE "TriggerDecision.inc";
--INCLUDE "Digitizer.inc";
INCLUDE "FindMaxAmp.inc";
--INCLUDE	"im_ram.inc";

INCLUDE "pdo.inc";
INCLUDE "seio.inc";
INCLUDE "diffin.inc";

CONSTANT Masks_Offset = H"20";   -- MasksReg #32

CONSTANT ADC_Bits			= 8;	-- Number of ADC bits in one channel
CONSTANT NUM_ADCboard		= 16;	-- Number of ADC boards in the trigger
CONSTANT NUM_TrigCell		= 128;	-- Number of channels in the trigger
CONSTANT NUM_Trig_get_ch	= 12;	-- Number of channels in the trigger from prev.board
CONSTANT ThresholdData_0	= 100;
CONSTANT ThresholdData_1	= 150;
CONSTANT ThresholdData_2	= 243;
CONSTANT TrigBits			= 64;		-- Number of triggerg bits to FCT

SUBDESIGN PreTrigger
(
-- 1. Reference Clock's & Frequency Control I/O
FQuartz			: input;	-- 40MHz clock from Quartz oscillator		<- Pin A8
FCTClk40		: input;	-- 40MHz clock from FCT board				<- Pin T14/T15
FCTClk160		: input;	-- 160MHz clock from FCT board				<- Pin W13/Y13

-- In Trigger module Link's Clock is checked inside Altera but switched outside 
Sw_Quartz		: output;	-- connects Quartz to PLL ref.Input			-> Pin B5
Sw_FCTClk		: output;	-- connects Link's Clock to PLL ref.Input	-> Pin B8

PLL_in			: input;	-- Ref.clock for PLL (dedicated)			<- Pin G1
--PLLExtOut		: output;	-- Output of PLL.e0 to outside				-> Pin 
--PLLlocked		: output;	-- Check of the PLL's locking status		-> Pin 

-- Outputs for Indicators on LED's

LedR			: output;	-- drives the Red LED						-> Pin 
LedG			: output;	-- drives the Green LED						-> Pin 
LedB			: output;	-- drives the Blue(Yellow) LED				-> Pin 

-- 2. Channel  

ADCInDataLVDS[NUM_TrigCell-1..0]: input;	-- input of data from ADC	<- Pin 
PreviousInDataLVDS[NUM_Trig_get_ch-1..0]: input;	-- input of data from ADC	<- Pin 

ADC_CSB			: output;	-- Pin AA4
ADC_SDIO		: output;	-- Pin AA1
ADC_SCLK		: output;	-- Pin AB4

ADC_CLK			: output;	-- Pin AA3/AB3
--ADC_DCO[31..0]	: input;	-- 
--ADC_DCOprev[11..0]	: input;	-- 
--ADC_channel_shift_clk : input;	-- Pin AB10

-- 3. Trig_in-out_FCT

TrigIn			: input;	-- Внешний триггер					<- Pin W10/Y10
--FastTrigDes		: output;	-- Fast trigger desition to EROS/ROESTI	<- Pin
TriggerData[TrigBits-1..0]: output;	-- Trigger data to FCT
%
Busy			: input;	--Pin AA13/AB13
BeamTime		: input;	--Pin U11/V11
PreBeamTime		: input;	--Pin AA16/AB16
Status_In[3..0]	: input;	--Pin 
SignalWindow	: input;	--Pin V13/W14
BoardID[7..0]	: input;	--Pin
%
-- 4. Ethernet Phy device ports     LXT972
RxClk			: input; --					-> Pin
Crs				: input;-- Carrier Sense
RxDv			: input;-- Data Valid
RxD[3..0]		: input; 
--RxEr			: input; -- RxEr not in use!!!! pin...-corner

TxClk			: input; --					-> Pin
TxEn			: output; --					-> Pin
TxD[3..0]		: output; --					-> Pin
Col 			: input; -- Collision_Detect not used	-> Pin

-- 5. 
--ExtStart		: input = GND;  -- external Start						<- Pin
ExtReset		: input = GND;  -- external Reset (tied to GND --VCC)	<- Pin

-- 6. Test
Test[9..0]			: OUTPUT;
--ADCInDataLVDS_p[126,127]: bidir;
--ADCInDataLVDS_n[126,127]: bidir;
)

VARIABLE
--============================================================================
--******** 1. Reference clock's & Frequency Control **************************
PLL				: PLL_Trigger; 
Clk20			: node;
Clk40			: node; -- This is Global Node
Clk80			: node; -- This is Global Node
Clk320_adc		: node;
Clk160			: node; -- This is Global Node

-- Automatic Clock Switch: if External_Clock frequency (kHz) is in specified 
--   range, PhaseSwitch transfers the External_Clock to PLL1's reference input, 
--   thus all PLL's output clocks are locked to the External_Clock. 
PhaseSw			: PhaseSwitch with (FmaxThresh=42000, FminThresh=38000, RefClock=40000);

Clk40del1,
Clk40del2		: node;
PhaseSet,				-- _/^^\_ pulse aligned to _/ front of StartBit
Phase20,
Synchro20,				-- 1-clock _/^\_ pulse aligned to _/ front of PHASE
Synchro40		: node; -- 1-clock _/^\_ pulse aligned to PHASE and half-PHASE

--******** Power-up self-Reset and self-Set pulses ***************************
PowerUp0,					--\   Circuit 
PowerUp1, PowerUp2,			-- \  which generates 
PowerUp3, PowerUp4,			--  \ a pulse 
PowerUp5, PowerUp6,			--  / for power-up Reset  \  many milliseconds apart 
PwrUpReset,					-- /  and then few pulses  > from each other
PwrUpSet1,PwrUpSet2: node;	--/ for power-up Set    /  

--============================================================================
--******** 2. Timers for Indicators on LED's (Duration in ms, RefClock in kHz)
B_Flash			: LightPulser with (Duration = 20, RefClock = 100000); -- Blue
R_Flash			: LightPulser with (Duration = 20, RefClock = 100000); -- Red

--============================================================================
--******** 3. Input TriggerData

ADCtest_bit_count	: lpm_counter with (lpm_width=6, lpm_direction="up" );
ADCtest_Bit_write	: node;
ADCtest_CSB_trig	: DFFE;
ADCtest_SDIO_trig	: DFFE;
ADCtest_reg			: lpm_shiftreg with (lpm_width=50,
						lpm_svalue = b"00000000000011010000110000000000001111111100000001",lpm_DIRECTION="left"); -- 
--								      "set	addr	 	data   set	addr		  data "
--									   3bit 13bit	 	8bit   3bit	13bit		  8bit
ADCreset_bit_count	: lpm_counter with (lpm_width=6, lpm_direction="up" );
ADCreset_Bit_write	: node;
ADCreset_CSB_trig	: DFFE;
ADCreset_SDIO_trig	: DFFE;
ADCreset_reg		: lpm_shiftreg with (lpm_width=50,
						lpm_svalue = b"00000000000011010000000000000000001111111100000001",lpm_DIRECTION="left"); -- 
--								  "set		addr	 data	 set	addr		  data "
-- Data from ADC must be 10 0110 0011 for 10-bits ADC
-- Data from ADC must be	1010 0011 for 8-bits ADC

ShiftClk[NUM_TrigCell-1..0]				: node;
%
ADCInData[NUM_ADCboard-1..0][NUM_TrigCell-1..0]	: LVDS_In;
ADCdata_align									: DFFE;
DDR_InLVDS[NUM_ADCboard-1..0][NUM_TrigCell-1..0]	: DDR_In;
DDR_Reg_pos[NUM_ADCboard-1..0][NUM_TrigCell-1..0]	: lpm_shiftreg with (lpm_width=5,lpm_DIRECTION="left");
DDR_Reg_neg[NUM_ADCboard-1..0][NUM_TrigCell-1..0]	: lpm_shiftreg with (lpm_width=5,lpm_DIRECTION="left");
InData[NUM_TrigCell-1..0][ADC_Bits-1..0]			: node;
Threshold_Reg[2..0]								: lpm_shiftreg with (lpm_width=ADC_Bits,lpm_DIRECTION="unused"); -- 
InData_Reg[NUM_ADCboard-1..0][NUM_TrigCell-1..0]	: lpm_shiftreg with (lpm_width=ADC_Bits,lpm_DIRECTION="unused"); -- 
%
ADCInData[NUM_TrigCell-1..0]		: LVDS_In;
--ADCdata_align					: DFFE;
DDR_InLVDS[NUM_TrigCell-1..0]		: DDR_In;
DDR_Reg_pos[NUM_TrigCell-1..0]		: lpm_shiftreg with (lpm_width=4,lpm_DIRECTION="left");
DDR_Reg_neg[NUM_TrigCell-1..0]		: lpm_shiftreg with (lpm_width=4,lpm_DIRECTION="left");
InData[NUM_TrigCell-1..0]			: node;
Threshold_Reg[2..0]				: lpm_shiftreg with (lpm_width=ADC_Bits,lpm_DIRECTION="unused"); -- 
Overflow						: node;
InData_RegMix[NUM_TrigCell-1..0]	: lpm_shiftreg with (lpm_width=ADC_Bits,lpm_DIRECTION="unused"); -- 
InData_Reg[NUM_TrigCell-1..0]		: lpm_shiftreg with (lpm_width=ADC_Bits,lpm_DIRECTION="unused"); -- 

--SignalProc[NUM_TrigCell..1]				: Digitizer;

--============================================================================
--******** 5. System ******************************************************
Reset		: node;
Loader		: node;
Error		: node;

--============================================================================
--******** 6. Trigger Decision ******************************************************
Trigger		: TriggerDecision;
Trig		: node;
FastTrigDis	: node;
TrigDis		: node;
Trigg_cs	: node; -- HistRam is saved MuskResult and worked Channel in event 

SignalProc			: FindMaxAmp;

ThreshCount_1Reg	: lpm_shiftreg with (lpm_width = 4, lpm_DIRECTION="unused");
ThreshCount_2Reg	: lpm_shiftreg with (lpm_width = 4, lpm_DIRECTION="unused");
ThreshCount_3Reg	: lpm_shiftreg with (lpm_width = 4, lpm_DIRECTION="unused");

TrigMaxAmp_Reg		: lpm_shiftreg with (lpm_width = ADC_Bits+2, lpm_DIRECTION="unused");
MaxCellNumber_Reg	: lpm_shiftreg with (lpm_width = 4, lpm_DIRECTION="unused");

Trigger_reg			: lpm_shiftreg with (lpm_width = 64, lpm_DIRECTION="unused");
TrigOUT[31..0]		: node;

--============================================================================
--******** 7. Fast Trigger Decision for EROS/ROESTI**********************************
--Four bit header + 32 bit trigger number + 8 bit CRC
FastTrigHeader		: lpm_shiftreg with (lpm_width = 4, lpm_DIRECTION="unused");
FastTrigNumber		: lpm_counter with (lpm_width=32, lpm_direction="up" );
FastTrigCRC			: lpm_shiftreg with (lpm_width = 8, lpm_DIRECTION="unused");
FastTrigDes_Reg		: lpm_shiftreg with (lpm_width = 44, lpm_DIRECTION="left");

--============================================================================
--******** 8. Test circuitry
TestCt		: lpm_counter WITH (lpm_width=26,           --\ Test Counter,
								lpm_direction="up");    --/   Blinking counter
TestTrigCt	: lpm_counter WITH (lpm_width=36, lpm_direction="up");
TestCt_rst1 : node; --\ Cirquit for generating a _/^^\_ ,
TestCt_rst2 : node; --/   duration >=(1/2)Tquartz
FastTrigDis_: node;

DelayReg[9..0]	: DFF;

b2v_inst2			: pdo;
b2v_inst3			: seio;
b2v_inst4			: seio;
b2v_inst5			: diffin;
Reg_DataTest1		: lpm_shiftreg with (lpm_width = 4, lpm_svalue = b"0111", lpm_DIRECTION="right");
Reg_DataTest2		: lpm_shiftreg with (lpm_width = 4, lpm_svalue = b"0001", lpm_DIRECTION="right");
%
	Im_ADC				:	im_ram;
	Im_ADCCt			:	LPM_COUNTER with (lpm_width = 8, lpm_direction="up" ); -- n?ao?ee 
--	Im_RAMAddrBus[7..0]	:	node;
%

--============================================================================
BEGIN

DEFAULTS

ADC_CSB = VCC;
ADC_SCLK = GND;
ADC_SDIO = GND;
Sw_Quartz = GND;
Sw_FCTClk = VCC;
ADCtest_Bit_write = GND;
Trig = GND;
--BoardID[7..0] = GND;

END DEFAULTS;

--============================================================================
--******** 1. Reference Clock & Frequency Control ****************************

        --============================================================================
--******** 1a. POWER_UP self-Reset pulse *************************************
--PowerUp0= DFF (.d=!(VME_s1 & VME_s2) AND PLL1.locked, .clk=Clk40);
        --               ^^^^^^^^ substituted by (VME_IFace.Reset & VME_IFace.Aout[4])..
        --  .. to provide a possibility to emulate PowerUp situation
PowerUp0= DFF (.d=!ExtReset AND PLL.locked, .clk=Clk40);

PowerUp1= SRFF(.s=(PowerUp0 AND (TestCt.q25 & TestCt.q0)),--sets 1.0s after PLL1 has locked
				.r=ExtReset, .clk=Clk40);  -- .r never =1
PowerUp2= SRFF(.s=(PowerUp1 AND TestCt.q2),             -- _/^^^^\_ 3clocks
				.r=ExtReset, .clk=Clk40);  -- .r never =1
PwrUpReset = PowerUp1 AND !PowerUp2;   -- ONE pulse ~1sec after powering up

--******** 1b. POWER_UP self-Set pulse ***************************************
PowerUp3= SRFF(.s=(PowerUp2 AND (!TestCt.q20 & !TestCt.q19 &  TestCt.q18)), --sets 0.015s after PwrUpReset
				.r=ExtReset, .clk=Clk40);      -- .r never =1
PowerUp4= SRFF(.s=(PowerUp3 AND TestCt.q2),             -- _/^^^^\_ 3clocks
				.r=ExtReset, .clk=Clk40);      -- .r never =1
PwrUpSet1 = PowerUp3 AND !PowerUp4;       -- ONE pulse ~0.06sec after PwrUpReset

--******** 1c. POWER_UP self-Set pulse ***************************************
PowerUp5= SRFF(.s=(PowerUp4 AND 
				( TestCt.q20 & !TestCt.q19 & !TestCt.q18)), --sets 0.060s after PwrUpReset
				.r=ExtReset, .clk=Clk40);      -- .r never =1
PowerUp6= SRFF(.s=(PowerUp5 AND TestCt.q2),             -- _/^^^^\_ 3clocks
				.r=ExtReset, .clk=Clk40);      -- .r never =1
PwrUpSet2 = PowerUp3 AND !PowerUp4;       -- ONE pulse ~0.06sec after PwrUpReset

--**************** Automatic Clock Switch for PLL reference ******************
PhaseSw.clock	= FQuartz;				-- 40MHz from Quartz
PhaseSw.SysClk 	= FCTClk40;				-- 40MHz from FCT
PhaseSw.Reset	= GND  ;
--    Phase25     = PhaseSw.Phase25 ; -- selected clock output to real pin
Sw_FCTClk		= !PhaseSw.SysClk_Selected; -- connects FCT's Clock to PLL ref.Input
Sw_Quartz		= PhaseSw.SysClk_Selected; -- connects Quartz to PLL ref.Input

--**************** PLL section ***********************************************
PLL.inclk0	= PLL_In;
--PLL1.pfdena = VCC;--!Reset;
--PLLlocked	= PLL.locked;      -- output to pad P2 for monitoring
--PLLExtOut	= PLL.e0;
Clk40		= Global(PLL.c0); --  40MHz clock
Clk160		= Global(PLL.c1); -- 160MHz clock
Clk320_adc	= Global(PLL.c2); -- частота бит по фронту
Clk20		= Global(PLL.c3); -- for program ADC
Clk80		= Global(PLL.c4); --

ADC_CLK = Clk80;

--============================================================================
-- ******** 2. Loader ********************************************
--Loader = SRFF(.s=PwrUpSet1,--sets 1.0s after PLL1 has locked
--				.r=PwrUpSet2, .clk=Clk40);

-- ******** 2.1 ADC setup********************************************
--Настройка фазы данных АЦП
%
ADCtest_bit_count.sclr = PwrUpReset;
ADCtest_bit_count.(clock, cnt_en, clk_en) = (Clk20, ADCtest_Bit_write, VCC);

IF ADCtest_bit_count.q[] < b"110100" Then ADCtest_Bit_write = VCC;
									 Else ADCtest_Bit_write = GND;
END IF;

ADCtest_reg.(clock,enable) = (Clk20, VCC);
ADCreset_reg.(clock,enable) = (Clk20, VCC);
IF ((ADCtest_bit_count.q[] >= b"000001") AND (ADCtest_bit_count.q[] < b"110100")) Then ADCtest_reg.sset = GND;
																					   ADC_SDIO = ADCtest_SDIO_trig;
																				  Else ADCtest_reg.sset = VCC;
																					   ADC_SDIO = GND;
END IF;
IF (((ADCtest_bit_count.q[] >= b"000001") AND (ADCtest_bit_count.q[] < b"011001")) OR ((ADCtest_bit_count.q[] >= b"011011") AND (ADCtest_bit_count.q[] < b"110011")))Then 
	ADCtest_CSB_trig.d = GND;
ELSE 
	ADCtest_CSB_trig.d = VCC;
END IF;
ADCtest_CSB_trig.clk = Clk20;
ADCtest_SDIO_trig.clk = Clk20;
ADCtest_SDIO_trig.d = ADCtest_reg.shiftout;
--ADCtest_SDIO_trig.d = ADCreset_reg.shiftout;
ADC_CSB = ADCtest_CSB_trig;
ADC_SCLK = Clk20;
%
-- ***************************************

Threshold_Reg[0].(data[], clock, enable, load) = (ThresholdData_0, Clk80, PwrUpSet1, VCC);
Threshold_Reg[1].(data[], clock, enable, load) = (ThresholdData_1, Clk80, PwrUpSet1, VCC);
Threshold_Reg[2].(data[], clock, enable, load) = (ThresholdData_2, Clk80, PwrUpSet1, VCC);

--============================================================================
-- ******** 3. Indicators section ********************************************

LedG = OPNDRN ( !(((PLL.locked AND  PhaseSw.SysClk_Selected) --always "ON" => PLL locked to LinkClock
				OR (PLL.locked AND !PhaseSw.SysClk_Selected AND TestCt.q[25])))); --blinks slowly => PLL locked to Quartz

--LedB = OPNDRN(!( B_Flash.DirOut OR Trigger.Trigger));
LedB = OPNDRN(!(B_Flash.DirOut OR Trig)); --!TrigOUT;
--LedB = OPNDRN( !TestCt.q[21] ) ;    -- for TEST Only! - quick blink
	B_Flash.(clock, event) =(Clk80,Trig); -- Busy is defined in Control Unit section

LedR = R_Flash.LightOut;
--LedR = OPNDRN( TC.q[21] ) ;         -- for TEST Only! - quick blink
R_Flash.(clock, event) =(Clk80,Error);-- Error is defined in Control Unit section

Error = PhaseSw.Error OR Overflow;

--============================================================================
--******** 4. ADC data *********************************************
%
FOR i in 0 to (NUM_TrigCell-1) GENERATE
	ADCInData[i].(rx_in[], rx_inclock) = (ADCInDataLVDS[i], Clk80);
	InData_Reg[i].(data[], clock, enable, load) = (ADCInData[i].rx_out[], Clk80, VCC, VCC);
END GENERATE;
%
FOR i in 0 to 15 GENERATE
	DDR_InLVDS[i].(datain, inclock, aclr) = (ADCInDataLVDS[i], Clk320_adc, Reset);
	DDR_Reg_pos[i].(shiftin, clock, enable, load) = (DDR_InLVDS[i].dataout_h, Clk320_adc, VCC, GND);
	DDR_Reg_neg[i].(shiftin, clock, enable, load) = (DDR_InLVDS[i].dataout_l, Clk320_adc, VCC, GND);
	InData_RegMix[i].(clock, enable, load) = (Clk80, VCC, VCC);
-- Защелкивание битов в определенной последовательности.
	InData_RegMix[i].data[7..0] = (DDR_Reg_pos[i].q[3],DDR_Reg_neg[i].q[3],DDR_Reg_pos[i].q[2],DDR_Reg_neg[i].q[2],
								DDR_Reg_pos[i].q[1],DDR_Reg_neg[i].q[1],DDR_Reg_pos[i].q[0],DDR_Reg_neg[i].q[0]);
	InData_Reg[i].(clock, enable, load) = (Clk80, VCC, VCC);
-- Защелкивание битов в определенной последовательности.
	InData_Reg[i].data[7..0] = (InData_RegMix[i].q[5],InData_RegMix[i].q[2],InData_RegMix[i].q[3],InData_RegMix[i].q[0],
								InData_RegMix[i].q[1],InData_RegMix[i].q[6],InData_RegMix[i].q[7],InData_RegMix[i].q[4]);
--Test[9..2] = InData_Reg[0].q[7..0];

--	InData_Reg[i].data[] = (%DDR_Reg_pos[i].q[4],%DDR_Reg_neg[i].q[3],DDR_Reg_pos[i].q[3]
--							DDR_Reg_neg[i].q[2],DDR_Reg_pos[i].q[2],DDR_Reg_neg[i].q[1],DDR_Reg_pos[i].q[1],
--							DDR_Reg_neg[i].q[0],DDR_Reg_pos[i].q[0],%,DDR_Reg_neg[i].q[4]%);
END GENERATE;

--******** 

--FOR i in 0 to 3 GENERATE
	IF (InData_Reg[0].q[] > Threshold_Reg[2].q[]) then Overflow = VCC;
												  else Overflow = GND;
	END IF;
--END GENERATE;
--******** 

--============================================================================
--******** 5. Trigger section *********************************************

SignalProc.Clock = Clk160;
SignalProc.Clock160 = Clk160;
SignalProc.Reset = ExtReset OR PwrUpReset;
SignalProc.RegInit = PwrUpSet1;
%
FOR i in 0 to 15 GENERATE
	IF (ADCInData[i].rx_out[9] == GND) Then
		SignalProc.In_Data[i][8..0] = !ADCInData[i].rx_out[8..0];--InData_Reg[i].q[];
	ELSE
		SignalProc.In_Data[i][8..0] = ADCInData[i].rx_out[8..0];--InData_Reg[i].q[];
		SignalProc.In_Data[i][9] = GND;
	END IF;
END GENERATE;
%
FOR i in 0 to 15 GENERATE
	SignalProc.In_Data[i][] = InData_Reg[i].q[];--ADCInData[i].rx_out[];--
END GENERATE;

TrigMaxAmp_Reg.(data[], clock, enable, load) = (SignalProc.MaxAmp[], Clk80, VCC, VCC);
MaxCellNumber_Reg.(data[], clock, enable, load) = (SignalProc.MaxCellNumber[], Clk80, VCC, VCC);

ThreshCount_1Reg.(data[], clock, enable, load) = (SignalProc.ThrNum1[], Clk80, VCC, VCC);
ThreshCount_2Reg.(data[], clock, enable, load) = (SignalProc.ThrNum2[], Clk80, VCC, VCC);
ThreshCount_3Reg.(data[], clock, enable, load) = (SignalProc.ThrNum3[], Clk80, VCC, VCC);

Trigger_reg.data[9..0] = SignalProc.MaxAmp[];--TrigMaxAmp_Reg.q[];
--Trigger_reg.data[9..8] = GND;
Trigger_reg.data[13..10] = SignalProc.MaxCellNumber[];--MaxCellNumber_Reg.q[2..0];
Trigger_reg.data[15..14] = GND;--ThreshCount_1Reg.q[];
Trigger_reg.data[19..16] = GND;--ThreshCount_2Reg.q[];
Trigger_reg.data[22..20] = GND;--ThreshCount_3Reg.q[];
Trigger_reg.data[23] = SignalProc.FastTrig;--DelayReg[9].q;--
Trigger_reg.data[24] = SignalProc.Trig;--DelayReg[9].q;--
Trigger_reg.data[51..25] = GND;
Trigger_reg.data[63..52] = TestTrigCt.q[11..0];
Trigger_reg.(clock,load,enable,aclr) = (Clk40, VCC, SignalProc.SaveTrigData, TestTrigCt.q[7]); -- SignalProc.test[13] - Inhibit from FindMaxAmp!!!
--Trigger_reg.(data[23..0],clock,load,enable) = (TestTrigCt.q[23..0], Clk40, VCC, VCC);
%
DelayReg[0].(d, clk) = (SignalProc.FastTrig, Clk40);
DelayReg[1].(d, clk) = (DelayReg[0].q, Clk40);
DelayReg[2].(d, clk) = (DelayReg[1].q, Clk40);
DelayReg[3].(d, clk) = (DelayReg[2].q, Clk40);
DelayReg[4].(d, clk) = (DelayReg[3].q, Clk40);
DelayReg[5].(d, clk) = (DelayReg[4].q, Clk40);
DelayReg[6].(d, clk) = (DelayReg[5].q, Clk40);
DelayReg[7].(d, clk) = (DelayReg[6].q, Clk40);
DelayReg[8].(d, clk) = (DelayReg[7].q, Clk40);
DelayReg[9].(d, clk) = (DelayReg[8].q, Clk40);
%
TriggerData[22..0] = Trigger_reg.q[22..0];
TriggerData[23] = SignalProc.FastTrig;--DelayReg[9].q;--
TriggerData[24] = SignalProc.Trig;--DelayReg[9].q;--
%FOR i in 14 to 22 GENERATE
	TriggerData[i] = GND;--TestTrigCt.q[i];
END GENERATE;%
--TriggerData[23] = Trigger_reg.q[23];
TriggerData[51..25] = Trigger_reg.q[51..25];
TriggerData[TrigBits-1..52] = Trigger_reg.q[63..52];

FastTrigDis = SignalProc.FastTrig;
TrigDis = SignalProc.Trig;

Trig = TrigDis;

--============================================================================
--******** 6. Ethernet Interface *******************************************

TxD[] = TestTrigCt.q[3..0];
TxEn = TrigIn;

--============================================================================
--******** 7. Control Unit section *******************************************

Reset = ExtReset;

--============================================================================
-- 8. Testing circuitry ******************************************************
%TestCt.(clock, clk_en)	= (FQuartz, VCC); -- Test Counter, can be used to drive LED blinking
--TestCt.(clock, clk_en)= (LinkClk, VCC); -- Test Counter, can be used to drive LED blinking
TestCt.cnt_en			= VCC;
TestCt.aclr				= PowerUp0 & !TestCt_rst2;  --\Reset for making proper PwrUp timing diagram
	TestCt_rst1 = DFF(.D=PowerUp0,   .clk= FQuartz);-- > _/^^\_ ,
	TestCt_rst2 = DFF(.D=TestCt_rst1,.clk=!FQuartz);--/   duration >=(1/2)Tquartz
%
TestCt.(clock, clk_en)	= (FQuartz, VCC); -- Test Counter, can be used to drive LED blinking
TestCt.cnt_en			=  PowerUp0;
TestCt.aclr				= !PowerUp0;    -- even if NO clock - Reset does occur

TestTrigCt.(clock, clk_en, sclr)	= (Clk80, VCC, (FastTrigDis AND !FastTrigDis_));
TestTrigCt.cnt_en = !(TestTrigCt.q[1] AND TestTrigCt.q[2] AND TestTrigCt.q[3] AND TestTrigCt.q[4] AND TestTrigCt.q[5] AND
					   TestTrigCt.q[6] AND TestTrigCt.q[7] AND TestTrigCt.q[8] AND TestTrigCt.q[9] AND TestTrigCt.q[10] AND TestTrigCt.q[11]);
FastTrigDis_ = DFF (.d=FastTrigDis, .clk=Clk80);
Test[0] = FastTrigDis;--Trigger_reg.q[23];--
Test[1] = TrigDis;--Trigger_reg.q[24];--SignalProc.test[11];--
Test[5..2] = SignalProc.test[15..12];--InData_Reg[11].q[7..0];
Test[9..7] = InData_Reg[0].q[7..5];
--Test[15..10] = GND;

IF InData_Reg[0].q[7..0]>Threshold_Reg[2].q Then Test[6] = VCC;
											Else Test[6] = GND;
END IF;
%
IF TestTrigCt.q[12]==VCC THEN 
Reg_DataTest1.(clock,enable) = (Clk80, VCC);
Reg_DataTest2.(clock,enable) = (Clk80, VCC);
END IF;
Link_IFace.LinkData_in = (b2v_inst5.dataout AND !Link_IFace.TxRx);

b2v_inst2.i = Reg_DataTest1.shiftout;
b2v_inst3.(datain, oe) = (b2v_inst2.o, TestTrigCt.q[12]);
b2v_inst4.(datain, oe) = (b2v_inst2.obar, TestTrigCt.q[12]);
b2v_inst5.(datain, datain_b) = (ADCInDataLVDS_p[126], ADCInDataLVDS_n[126]);

ADCInDataLVDS_p[126] = b2v_inst3.dataout;
ADCInDataLVDS_n[126] = b2v_inst4.dataout;
%

%	Im_ADC.data_a[9..0] = ADCdata[];
	Im_ADC.data_a[15..10] = GND;
	Im_ADC.(address_a[], clock_a, wren_a) = (Im_ADCCt.q[7..0], ADC_Clock, Working);
	Im_ADC.data_a[] = GND;
	Im_ADC.(address_a[], clock_a, wren_a) = (Im_ADCCt.q[7..0], ADC_Clock, GND);
	
--	Im_ADC.(data_b[],address_b[], clock_b)= (DataBus_In[],Im_RAMAddrBus[7..0], Bus_clock);
	Im_ADC.(data_b[],address_b[], clock_b)= (DataBus_In[],AddrBus_In[7..0], Bus_clock);
	Im_ADC.wren_b = DataBusStrobe and  DirectIn AND Select AND Ram_SeL[0];
	
	Im_ADCCt.clock   = ADC_Clock;
	Im_ADCCt.sclr = !Working;
--	Im_ADCCt.clk_en  = VCC;
--	Im_ADCCt.cnt_en = GND;
--	Im_RAMAddrBus[7..0] = AddrBus_In[7..0] + Im_ADCCt.q[7..0]; -- aunoaaeaiea aa?ana a 0 aey oaeouaai iaai?a FOR-ia

Test[0] = FastTrigDis;
Test[1] = TrigDis;
Test[2] = GND;
Test[6..3] = SignalProc.test[14..11];--InData_Reg[11].q[7..0];
Test[9..7] = SignalProc.test[10..8];--InData_Reg[11].q[7..0];
Test[15..10] = GND;

Test[7..0] = TrigMaxAmp_Reg.q[7..0];--InData_Reg[9].q[8..0];
Test[8] = SignalProc.MaxCellNumber[0];--PwrUpSet1;
Test[9] = SignalProc.MaxCellNumber[1];--PLL.locked;
Test[10] = SignalProc.Trig;--SignalProc.MaxCellNumber[2];--Clk80;
--Test[11] = SignalProc.MaxCellNumber[3];--PwrUpReset;--SignalProc.MaxAmp[3];--FCTClk40;
Test[14..11] = SignalProc.test[14..11];--SignalProc.MaxAmp[4];

--Test[7..0] = SignalProc.test[7..0];--InData_Reg[0].q[9..2];--SignalProc.test[7..0];
--Test[14..0] = SignalProc.test[14..0];--InData_Reg[1].q[9..3];--SignalProc.test[14..8];
Test[15] = TestCt.q[15];--SignalProc.Trig[5];--
%
END;