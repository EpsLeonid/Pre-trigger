Title "Fast Trigger Module for Prototype of COMET Calorimeter";

INCLUDE "lpm_compare.inc" ;
INCLUDE "lpm_shiftreg.inc" ;
INCLUDE "lpm_counter.inc" ;
INCLUDE	"lpm_add_sub.inc";
INCLUDE "lpm_mux.inc" ;
INCLUDE "lpm_ff.inc";

INCLUDE "EdgeSensing.inc";
INCLUDE "LevelSensing.inc" ;
INCLUDE "PulseShaper.inc" ;
INCLUDE "LightPulser.inc";
INCLUDE "PhaseSwitch.inc";

INCLUDE "PLL_Trigger.inc";

Constant Hedder = b"0110";
Constant CRC = b"00110010";

SUBDESIGN FastTrig_board
(
-- 1. Reference Clock's & Frequency Control I/O
FQuartz			: input;	-- 40MHz clock from Quartz oscillator		<- Pin A8
FCTClk40		: input;	-- 40MHz clock from FCT board				<- Pin T14/T15

PLL_res			: output;	-- 											-> Pin 
PLL_in			: input;	-- Ref.clock for PLL (dedicated)			<- Pin G1
--PLLExtOut		: output;	-- Output of PLL.e0 to outside				-> Pin 
--PLLlocked		: output;	-- Check of the PLL's locking status		-> Pin 

-- Outputs for Indicators on LED's

LedR			: output;	-- drives the Red LED						-> Pin 
LedG			: output;	-- drives the Green LED						-> Pin 
LedB			: output;	-- drives the Blue(Yellow) LED				-> Pin 

-- 2. Fast tirgger signal input

FastTrig_in[4..1]		: input;

Trigger					: output;

-- 3. 
--ExtStart		: input = GND;  -- external Start						<- Pin
Reset			: input = GND;  -- external Reset (tied to GND --VCC)	<- Pin

-- 4. Test
Test[9..0]			: OUTPUT;
)

VARIABLE
--============================================================================
--******** 1. Reference clock's & Frequency Control **************************
PLL				: PLL_Trigger; 
Clk40			: node; -- This is Global Node
Clk80			: node; -- This is Global Node
Clk160			: node; -- This is Global Node

ClkQuartz		: node; -- This is Global Node

PhaseSw			: PhaseSwitch with (FmaxThresh=42000, FminThresh=38000, RefClock=40000);

--******** Power-up self-Reset and self-Set pulses ***************************
PowerUp0,					--\   Circuit 
PowerUp1, PowerUp2,			-- \  which generates 
PowerUp3, PowerUp4,			--  \ a pulse 
PowerUp5, PowerUp6,			--  / for power-up Reset  \  many milliseconds apart 
PwrUpReset,					-- /  and then few pulses  > from each other
PwrUpSet1,PwrUpSet2: node;	--/ for power-up Set    /  

--============================================================================
--******** 2. Timers for Indicators on LED's (Duration in ms, RefClock in kHz)
B_Flash			: LightPulser with (Duration = 20, RefClock = 100000); -- Blue
R_Flash			: LightPulser with (Duration = 20, RefClock = 100000); -- Red

--============================================================================
--******** 3. Trigger ******************************************************
FastTrig[4..1],
FastTrigDelay[4..1]	: DFF;
DelayLine[10..1]	: DFF;
Trig			: node;
TrigDes			: SRFF;
--AllReset		: DFF;

--****Section "a"
--EventCout		: lpm_counter WITH (lpm_width=32, lpm_direction="up");
--TrigTransf_load	: EdgeSensing;
--TrigTransf_en	: SRFF;
--TrigTransf		: lpm_shiftreg with (lpm_width=44, lpm_direction="left");
--DataTransfCout	: lpm_counter WITH (lpm_width=10, lpm_direction="up");
--EndTransf		: node;
--EndTransfDelay	: DFF;

--****Section "b"
TrigTimeCnt		: lpm_counter WITH (lpm_width=10, lpm_direction="up");

--============================================================================
--******** 5. System ******************************************************
--Reset		: node;
Loader		: node;
Error		: node;

--============================================================================
--******** 8. Test circuitry
TestCt		: lpm_counter WITH (lpm_width=26,           --\ Test Counter,
								lpm_direction="up");    --/   Blinking counter
TestTrigCt	: lpm_counter WITH (lpm_width=36, lpm_direction="up");
TestCt_rst1 : node; --\ Cirquit for generating a _/^^\_ ,
TestCt_rst2 : node; --/   duration >=(1/2)Tquartz

BEGIN

DEFAULTS

Trig = GND;
--EndTransf = VCC;

END DEFAULTS;

--============================================================================
--******** 1. Reference Clock & Frequency Control ****************************

        --============================================================================
--******** 1a. POWER_UP self-Reset pulse *************************************
--PowerUp0= DFF (.d=!(VME_s1 & VME_s2) AND PLL1.locked, .clk=Clk40);
        --               ^^^^^^^^ substituted by (VME_IFace.Reset & VME_IFace.Aout[4])..
        --  .. to provide a possibility to emulate PowerUp situation
PowerUp0= DFF (.d=!Reset AND PLL.locked, .clk=Clk40);

PowerUp1= SRFF(.s=(PowerUp0 AND (TestCt.q25 & TestCt.q0)),--sets 1.0s after PLL1 has locked
				.r=Reset, .clk=Clk40);  -- .r never =1
PowerUp2= SRFF(.s=(PowerUp1 AND TestCt.q2),             -- _/^^^^\_ 3clocks
				.r=Reset, .clk=Clk40);  -- .r never =1
PwrUpReset = PowerUp1 AND !PowerUp2;   -- ONE pulse ~1sec after powering up

--******** 1b. POWER_UP self-Set pulse ***************************************
PowerUp3= SRFF(.s=(PowerUp2 AND (!TestCt.q20 & !TestCt.q19 &  TestCt.q18)), --sets 0.015s after PwrUpReset
				.r=Reset, .clk=Clk40);      -- .r never =1
PowerUp4= SRFF(.s=(PowerUp3 AND TestCt.q2),             -- _/^^^^\_ 3clocks
				.r=Reset, .clk=Clk40);      -- .r never =1
PwrUpSet1 = PowerUp3 AND !PowerUp4;       -- ONE pulse ~0.06sec after PwrUpReset

--******** 1c. POWER_UP self-Set pulse ***************************************
PowerUp5= SRFF(.s=(PowerUp4 AND 
				( TestCt.q20 & !TestCt.q19 & !TestCt.q18)), --sets 0.060s after PwrUpReset
				.r=Reset, .clk=Clk40);      -- .r never =1
PowerUp6= SRFF(.s=(PowerUp5 AND TestCt.q2),             -- _/^^^^\_ 3clocks
				.r=Reset, .clk=Clk40);      -- .r never =1
PwrUpSet2 = PowerUp3 AND !PowerUp4;       -- ONE pulse ~0.06sec after PwrUpReset

--**************** Automatic Clock Switch for PLL reference ******************
PhaseSw.clock	= FQuartz;				-- 40MHz from Quartz
PhaseSw.SysClk 	= FCTClk40;				-- 40MHz from FCT
PhaseSw.Reset	= GND  ;
--    Phase25     = PhaseSw.Phase25 ; -- selected clock output to real pin
IF (PhaseSw.SysClk_Selected == VCC) Then PLL_res = FQuartz;
									Else PLL_res = FCTClk40;
END IF;

--**************** PLL section ***********************************************
PLL.inclk0	= FQuartz;--PLL_In;
--PLL1.pfdena = VCC;--!Reset;
--PLLlocked	= PLL.locked;      -- output to pad P2 for monitoring
--PLLExtOut	= PLL.e0;
Clk40		= Global(PLL.c0); --  40MHz clock
Clk80		= Global(PLL.c1); --  80MHz clock
Clk160		= Global(PLL.c2); -- 160MHz clock

ClkQuartz	= Global(FQuartz);

--============================================================================
-- ******** 2. Indicators section ********************************************

LedG = OPNDRN ( !(((PLL.locked AND  PhaseSw.SysClk_Selected) --always "ON" => PLL locked to LinkClock
				OR (PLL.locked AND !PhaseSw.SysClk_Selected AND TestCt.q[25])))); --blinks slowly => PLL locked to Quartz

--LedB = OPNDRN(!( B_Flash.DirOut OR Trigger.Trigger));
LedB = OPNDRN(!(B_Flash.DirOut OR Trig)); --!TrigOUT;
--LedB = OPNDRN( !TestCt.q[21] ) ;    -- for TEST Only! - quick blink
	B_Flash.(clock, event) =(Clk80,Trig); -- Busy is defined in Control Unit section

LedR = R_Flash.LightOut;
--LedR = OPNDRN( TC.q[21] ) ;         -- for TEST Only! - quick blink
R_Flash.(clock, event) =(Clk80,Error);-- Error is defined in Control Unit section

Error = PhaseSw.Error;

--============================================================================
--******** 3. Trigger section *********************************************

FastTrig[1].(d, clk) = (FastTrig_in[1], Clk40);
FastTrig[2].(d, clk) = (FastTrig_in[2], Clk40);
FastTrig[3].(d, clk) = (FastTrig_in[3], Clk40);
FastTrig[4].(d, clk) = (FastTrig_in[4], Clk40);

FastTrigDelay[1].(d, clk) = (FastTrig[1], Clk40);
FastTrigDelay[2].(d, clk) = (FastTrig[2], Clk40);
FastTrigDelay[3].(d, clk) = (FastTrig[3], Clk40);
FastTrigDelay[4].(d, clk) = (FastTrig[4], Clk40);

DelayLine[1].(d, clk) = (FastTrig[1].q, Clk40);
DelayLine[2].(d, clk) = (DelayLine[1].q, Clk40);
DelayLine[3].(d, clk) = (DelayLine[2].q, Clk40);
DelayLine[4].(d, clk) = (DelayLine[3].q, Clk40);
DelayLine[5].(d, clk) = (DelayLine[4].q, Clk40);
DelayLine[6].(d, clk) = (DelayLine[5].q, Clk40);
DelayLine[7].(d, clk) = (DelayLine[6].q, Clk40);
DelayLine[8].(d, clk) = (DelayLine[7].q, Clk40);
DelayLine[9].(d, clk) = (DelayLine[8].q, Clk40);
DelayLine[10].(d, clk) = (DelayLine[9].q, Clk40);

--******** 3a. Transfer trigger packege *********************************************
--IF ((DelayLine[1].q %OR 
--	 (FastTrig[2].q and !FastTrigDelay[2].q) OR 
--	 (FastTrig[3].q and !FastTrigDelay[3].q) OR 
--	 (FastTrig[4].q and !FastTrigDelay[4].q)%) == VCC) Then Trig = VCC;
--													   Else Trig = GND;
--END IF;

--EventCout.(clock, clk_en, cnt_en, aclr) = (Clk160, VCC, DelayLine[1].q, Reset);
--
--TrigTransf_load.(d, clk) = (DelayLine[1].q, Clk160);
--
--TrigTransf_en.(S, Clk, R, clrn) = (Trig, Clk160, Reset, !AllReset.q);
----TrigTransf.(data[], clock, enable, load) = ((Hedder,EventCout.q[],CRC), Clk80, VCC, TrigTransf_load.q);--TrigDes.q);
--TrigTransf.(data[], clock, enable, load, sclr) = (b"10110001110000111100000111110000111100011100", Clk80, TrigTransf_en.q, TrigTransf_load.q, AllReset.q);--TrigDes.q);
--
--TrigDes.(S, Clk, R, clrn) = (TrigTransf_load.q, Clk80, Reset, !AllReset.q);
--
--DataTransfCout.(clock, clk_en, cnt_en, sclr) = (Clk80, VCC, TrigDes.q and !DelayLine[2].q and !DelayLine[3].q, EndTransfDelay.q);-- AllReset.q);
--
--IF (DataTransfCout.q[] == b"0000101011") then EndTransf = VCC;
--										 else EndTransf = GND;
--END IF;
--
--IF (TrigDes.q == VCC) then Trigger = TrigTransf.shiftout;
--					  else Trigger = GND;
--END IF;
--
--EndTransfDelay.(d, clk) = (EndTransf, clk80);
--
--AllReset.(d, clk) = (EndTransf and !EndTransfDelay.q, clk80);
--AllReset.(d, clk) = (TrigDes.q, Clk160);

--******** 3b. Transfer trigger  *********************************************
IF (FastTrig[1].q and !FastTrigDelay[1].q) Then Trig = VCC;
										   Else Trig = GND;
END IF;

TrigDes.(S, Clk, R) = (DelayLine[5].q, Clk40, !TrigTimeCnt.cout);
TrigTimeCnt.(clock, clk_en, cnt_en) = (Clk40, VCC, TrigDes.q);--, AllReset.q);

Trigger = DelayLine[10].q;

--AllReset.(d, clk) = (TrigTimeCnt.cout, Clk40);

--============================================================================
-- 10. Testing circuitry ******************************************************
%TestCt.(clock, clk_en)  = (FQuartz, VCC); -- Test Counter, can be used to drive LED blinking
--TestCt.(clock, clk_en)  = (LinkClk, VCC); -- Test Counter, can be used to drive LED blinking
TestCt.cnt_en           = VCC;
TestCt.aclr             = PowerUp0 & !TestCt_rst2;  --\Reset for making proper PwrUp timing diagram
    TestCt_rst1 = DFF(.D=PowerUp0,   .clk= FQuartz);-- > _/^^\_ ,
    TestCt_rst2 = DFF(.D=TestCt_rst1,.clk=!FQuartz);--/   duration >=(1/2)Tquartz
%
TestCt.(clock, clk_en)	= (FQuartz, VCC); -- Test Counter, can be used to drive LED blinking
TestCt.cnt_en			= PowerUp0;
TestCt.aclr				= !PowerUp0;    -- even if NO clock - Reset does occur

Test0	= VCC;
Test1	= FQuartz;
Test2	= Clk40;
Test3	= FastTrig[1].q;
Test4	= Trig;
Test5	= TrigDes.q;-- and !FastTrigDelay[1].q;
Test6	= DelayLine[5].q;--EventCout.q[0];
Test7	= GND;--AllReset.q;--TrigDes.q and !DelayLine[2].q and !DelayLine[3].q;
Test8	= TrigTimeCnt.cout;--TrigTransf_en.q;--TestCt.q[1];
Test9	= TestCt.q[3];

END;